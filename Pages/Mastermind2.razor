@page "/game"

<Board Mastermind=@_mastermind>
	<EmptyPegTemplate>
		<PegComponent />
	</EmptyPegTemplate>
	<EmptyPinTemplate>
		<PinComponent Pin="Pin.None" />
	</EmptyPinTemplate>
	<PegTemplate>
		<PegComponent Peg="context" />
	</PegTemplate>
	<PinTemplate>
		<PinComponent Pin="context" />
	</PinTemplate>
	<GuessTemplate>
		@foreach (var peg in _guess.Pegs) // GuessComponent
		{
			<PegComponent Peg="peg" />
		}
	</GuessTemplate>
	<ColorsTemplate>
		@foreach (var peg in _mastermind.AvailableColors) //AvailableComponent
		{
			<PegComponent Peg="peg" PickColor=@PickColorHandler />
		}
	</ColorsTemplate>
</Board>

<Options Settings=@_mastermind.Settings OnOptionsChanged=@ChangeSettings />

@_message

@code {
	private Mastermind _mastermind;
	private Guess _guess;
	private string _message;

	protected override void OnInitialized()
	{
		_mastermind = Mastermind.Create();
		_guess = _mastermind.CreateGuess();
		_mastermind.MessageReceived += MessageReceivedHandler;
		_mastermind.MessageReceived -= MessageReceivedHandler;

		_mastermind.GameFinished += (sender, winner) =>
		{
			_message = winner ? "Győztél." : "Vesztettél.";
		};

		base.OnInitialized();
	}

	private void MessageReceivedHandler(object sender, string message)
	{
		_message = message;
	}

	private void ChangeSettings(Settings settings)
	{
		_mastermind.Configure(settings);
	}

	private void PickColorHandler(Peg peg)
	{
		_guess.AddPeg(peg);
		if (_guess.IsValid())
		{
			_mastermind.AddGuess(_guess);
			_guess = _mastermind.CreateGuess();

		}
	}
}

