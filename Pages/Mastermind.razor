@page "/mastermind"
<PageTitle>Mastermind</PageTitle>
<h1>Mastermind</h1>
<div class="table">
	<div class="gamespace">
		<section>
			<div class="dhead">
				@for (int i = 0; i < 4; i++)
				{
					<div class="dheaditem" style="background-color:@randomcolors[i]"></div>
				}
			</div>
		</section>
		<br />
		<section>
			<div class="dbody">
				@for (int i = 0; i < 11; i++)
				{
					int row = i;
					<div class="dbodyitem"> 
						@for (int j = 0; j < 4; j++)
						{
							int circle = j;
							<div class="ditem" style="@ChangePinColor(row, circle)" @onclick="() => PinColor(row, circle)"></div>
						}
					</div>
					<br />
				}
			</div>
		</section>
		<br />
		<section>
			<div class="dfoot">
				@for (int i = 0; i < 8; i++)
				{
					var tempindex = i;
					<div class="dfootitem" style="@SelectedColorStyle(i)" @onclick="() => SelectColor(tempindex)"></div>
				}
			</div>
		</section>
	</div>
	<div class="sidepart">
		<button>Felad</button>
		<div class="rowresult">
			@for (int i = 0; i < 11; i++)
			{
				<div class="pinpanel">
					@for (int j = 0; j < 4; j++)
					{
						<div class="pin"></div>
					}
				</div>
			}
		</div>
		<button @onclick="() => Check()">Csekk</button>
	</div>
</div>


@code {
	private string[] colors = { "red", "white", "blue", "pink", "orange", "purple", "yellow", "green" };
	Random random = new();
	private string[] randomcolors = new string[4];
	private string selectedcolor;
	private int selectedcolorindex;
	private int currentrow;
	private string[,] pins = new string[11,4];

	protected override void OnInitialized()
	{
		for (int i = 0; i < randomcolors.Length; i++)
		{
			this.randomcolors[i] = colors[random.Next(0, 7)];
		}
		this.currentrow = 0;
		SelectColor(0);
	}

	private void SelectColor(int index){
		selectedcolor = colors[index];
		selectedcolorindex = index;
	}

	private string SelectedColorStyle (int colorindex){
		if (colorindex == this.selectedcolorindex)
		{
			return $"background-color:{colors[colorindex]}; border: 3px solid black;";
		}
		else
		{
			return $"background-color:{colors[colorindex]};";
		}
	}

	private void PinColor(int row, int circle){
		if (currentrow == row)
		{
			pins[row, circle] = selectedcolor;
		}
	}

	private string ChangePinColor(int row, int circle){
		if(currentrow == row){
			return $"background-color:{pins[row, circle]}; box-shadow: gray 3px 3px 10px;";
		}
		else 
		{
			return $"background-color:{pins[row, circle]};";
		}
	}

	private void Check(){
		bool meh = true;
		for (int i = 0; i < 4; i++)
		{
			if(!colors.Contains(pins[currentrow, i]))
			{
				meh = false;
			}
		}

		if(meh)
		{
			currentrow++;
		}
	}
}
